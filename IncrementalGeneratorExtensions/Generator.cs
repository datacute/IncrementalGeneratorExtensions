using System;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Datacute.IncrementalGeneratorExtensions
{
    [Generator]
    /// <summary>
    /// Incremental generator that injects embedded helper source files into the consuming compilation.
    /// </summary>
    public class Generator : IIncrementalGenerator
    {
        /// <summary>
        /// Registers the post-initialisation callback that loads embedded .cs resources and adds them via <see cref="IncrementalGeneratorPostInitializationContext.AddSource(string,SourceText)"/>.
        /// </summary>
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterPostInitializationOutput(ProcessEmbeddedResources);
        }

        private void ProcessEmbeddedResources(IncrementalGeneratorPostInitializationContext context)
        {
            // Get the assembly where this generator is defined
            var assembly = typeof(Generator).Assembly;
            var assemblyName = assembly.GetName();
            var generatorName = assemblyName?.Name ?? "a source code generator";
            var version = assemblyName?.Version != null ? assemblyName.Version.ToString(fieldCount: 3) : "unknown";

            var header =
                $"//------------------------------------------------------------------------------{Environment.NewLine}" +
                $"// <auto-generated>{Environment.NewLine}" +
                $"//     This code was generated by {generatorName}.{Environment.NewLine}" +
                $"//     Version: {version}{Environment.NewLine}" +
                $"// </auto-generated>{Environment.NewLine}" +
                $"//------------------------------------------------------------------------------{Environment.NewLine}{Environment.NewLine}";

            // Retrieve all embedded resource names
            var resourceNames = assembly.GetManifestResourceNames();

            foreach (var resourceName in resourceNames)
            {
                // Only process .cs files
                if (!resourceName.EndsWith(".cs", StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                // Extract a suitable file name for the generated source
                var fileName = Path.GetFileNameWithoutExtension(Path.GetFileName(resourceName)) + ".g.cs";

                using (var stream = assembly.GetManifestResourceStream(resourceName))
                {
                    if (stream == null) continue;

                    using (var reader = new StreamReader(stream))
                    {
                        // Rebuild text with platform newline to avoid mixed line endings
                        var sb = new StringBuilder(header.Length + (int)stream.Length + 32);
                        sb.Append(header);

                        string line;
                        while ((line = reader.ReadLine()) != null)
                        {
                            sb.Append(line);
                            sb.Append(Environment.NewLine);
                        }

                        var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

                        // Add the source to the compilation
                        context.AddSource(fileName, sourceText);
                    }
                }
            }
        }
    }
}