// <auto-generated>
// This file is part of the Datacute.IncrementalGeneratorExtensions package.
// It is included as a source file and should not be modified.
// </auto-generated>

#if !DATACUTE_EXCLUDE_TABINDENTINGLINEAPPENDER && !DATACUTE_EXCLUDE_INDENTINGLINEAPPENDER
using System.Text;

namespace Datacute.IncrementalGeneratorExtensions
{
    /// <summary>
    /// An <see cref="IndentingLineAppender"/> that uses tab characters for indentation.
    /// </summary>
    public class TabIndentingLineAppender : IndentingLineAppender
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TabIndentingLineAppender"/> class with a new <see cref="StringBuilder"/>.
        /// </summary>
        public TabIndentingLineAppender() 
            : this(new StringBuilder())
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TabIndentingLineAppender"/> class with a new <see cref="StringBuilder"/> and custom block delimiters.
        /// </summary>
        /// <param name="blockStart">The string that marks the start of a block.</param>
        /// <param name="blockEnd">The string that marks the end of a block.</param>
        public TabIndentingLineAppender(string blockStart, string blockEnd) 
            : this(new StringBuilder(), blockStart, blockEnd)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TabIndentingLineAppender"/> class with the specified <see cref="StringBuilder"/> and optional block delimiters.
        /// </summary>
        /// <param name="stringBuilder">The <see cref="StringBuilder"/> to append to.</param>
        /// <param name="blockStart">The string that marks the start of a block. Defaults to <c>"{"</c>.</param>
        /// <param name="blockEnd">The string that marks the end of a block. Defaults to <c>"}"</c>.</param>
        public TabIndentingLineAppender(
            StringBuilder stringBuilder,
            string blockStart = "{",
            string blockEnd = "}")
            : base(stringBuilder, '\t', 1, blockStart, blockEnd)
        {
        }
    }
}
#endif