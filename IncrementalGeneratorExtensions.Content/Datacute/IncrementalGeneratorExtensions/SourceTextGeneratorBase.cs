// <auto-generated>
// This file is part of the Datacute.IncrementalGeneratorExtensions package.
// It is included as a source file and should not be modified.
// </auto-generated>

#if !DATACUTE_EXCLUDE_SOURCETEXTGENERATORBASE && !DATACUTE_EXCLUDE_ATTRIBUTECONTEXTANDDATA && !DATACUTE_EXCLUDE_TYPECONTEXT && !DATACUTE_EXCLUDE_INDENTINGLINEAPPENDER
using System;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis.Text;

namespace Datacute.IncrementalGeneratorExtensions
{
    /// <summary>
    /// Base class for source text generators that produce source code based on a type context and its attributes.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class SourceTextGeneratorBase<T> 
        where T : IEquatable<T>
    {
        protected SourceTextGeneratorBase(
            in AttributeContextAndData<T> contextAndData,
            in CancellationToken cancellationToken)
        {
            ContainingNamespaceIsGlobalNamespace = contextAndData.ContainingNamespaceIsGlobalNamespace;
            ContainingNamespaceDisplayString = contextAndData.ContainingNamespaceDisplayString;
            Context = contextAndData.Context;
            HasContainingTypes = contextAndData.HasContainingTypes;
            ContainingTypes = contextAndData.ContainingTypes;
            NullableEnabled = contextAndData.IsNullableContextEnabled;
            FileScopedNamespace = contextAndData.IsInFileScopedNamespace;
            Token = cancellationToken;
            Buffer = new IndentingLineAppender();
        }

        protected virtual bool ContainingNamespaceIsGlobalNamespace { get; }
        protected virtual string ContainingNamespaceDisplayString { get; }
        protected virtual TypeContext Context { get; }
        protected virtual bool HasContainingTypes { get; }
        protected virtual EquatableImmutableArray<TypeContext> ContainingTypes { get; }
        protected virtual IndentingLineAppender Buffer { get; }
        protected virtual bool NullableEnabled { get; }
        protected virtual bool FileScopedNamespace { get; }
        protected virtual CancellationToken Token { get; }
        protected virtual string AutoGeneratedComment => /* language=c# */
            @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source code generator.
// </auto-generated>
//------------------------------------------------------------------------------";


        public virtual SourceText GetSourceText()
        {
            AppendSource();
            return SourceText.From(Buffer.ToString(), Encoding.UTF8);
        }

        protected virtual void AppendSource()
        {
            PrepareForGeneration();

            AppendAutoGeneratedComment();
            AppendNullableEnable();
            AppendStartNamespace();
            AppendContainingTypes();
            AppendDocComments();
            AppendTypeDeclaration();
            AppendStartBlock();

            AppendCustomMembers();

            AppendEndBlock();
            AppendContainingTypesEndBlock();
            AppendEndNamespace();

            AppendDiagnosticLogs();
        }
        
        protected virtual void PrepareForGeneration()
        {
            Token.ThrowIfCancellationRequested();
            Buffer.Clear();
        }

        protected virtual void AppendAutoGeneratedComment()
        {
            Buffer.AppendLine(AutoGeneratedComment);
            Buffer.AppendLine();
        }

        protected virtual void AppendNullableEnable()
        {
            if (NullableEnabled)
            {
                Buffer.AppendLine("#nullable enable");
                Buffer.AppendLine();
            }
        }

        protected virtual void AppendStartNamespace()
        {
            if (ContainingNamespaceIsGlobalNamespace) return;

            Buffer.Append("namespace ");
            Buffer.Append(ContainingNamespaceDisplayString);
            if (FileScopedNamespace)
            {
                Buffer.Append(';').AppendLine();
                Buffer.AppendLine();
            }
            else
            {
                AppendStartBlock();
            }
        }
        
        protected virtual void AppendDocComments()
        {
        }

        protected virtual void AppendContainingTypes()
        {
            if (HasContainingTypes)
            {
                StartParentClasses();
            }
        }

        protected virtual void StartParentClasses()
        {
            foreach (var parentClass in ContainingTypes)
            {
                Buffer.AppendLine(parentClass.TypeDeclaration());
                AppendStartBlock();
            }
        }

        protected virtual void AppendTypeDeclaration()
        {
            Buffer.AppendLine(Context.TypeDeclaration());
        }

        protected virtual void AppendStartBlock()
        {
            Buffer.AppendStartBlock();
        }

        protected virtual void AppendCustomMembers()
        {
        }

        protected virtual void AppendEndBlock()
        {
            Buffer.AppendEndBlock();
        }

        protected virtual void AppendContainingTypesEndBlock()
        {
            // Close parent classes if any
            if (!HasContainingTypes) return;

            for (int i = 0; i < ContainingTypes.Count; i++)
            {
                AppendEndBlock();
            }
        }

        protected virtual void AppendEndNamespace()
        {
            if (ContainingNamespaceIsGlobalNamespace) return;

            if (FileScopedNamespace) return;

            AppendEndBlock();
        }

        protected virtual void AppendDiagnosticLogs()
        {
        }
    }
}
#endif